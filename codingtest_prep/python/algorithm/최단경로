최단 경로 문제
: 두 노드를 잇는 가장 짧은 경로를 찾는 문제
가중치 그래프 에서 간선 의 가중치 합이 최소가 되도록 하는 경로를 찾는 것이 목적

1.최단 경로 문제 종류
 - 단일 출발 및 단일 도착
  - 그래프 내의 특정 노드 u 에서 출발, 또 다른 특정 노드 v에 도착하는 가장 짧은 경로를 찾는 문제
 - 단일 출발
  - 그래프 내의 특정 노드 u와 그래프 내 다른 모든 노드 각각의 가장 짧은 경로를 찾는 문제
 - 전체 쌍 최단 경로 : 그래프 내의 모든 노드 쌍에 대한 최단 경로를 찾는 문제

2. 최단경로 알고리즘 : 다익스트라 알고리즘
 - 위의 최단 경로 문제 종류 중, 2번에 해당
  - 하나의 정점에서 다른 모든 정점 간의 각각 가장 짧은 거리를 구하는 문제
 - 너비우선탐색과 유사
  - 첫 정점부터 각 노드간의 거리를 저장하는 배열을 만든 후, 첫 정점의 인접 노드 간의 거리부터 먼저 계산 하면서, 첫 정점부터 해당 노드간의 가장 짧은 거리를 해당 배열에 업에디느
   - 다익스트라 알고리즘의 다양한 변형 로직이 있지만, 가장 개선된 우선순의 큐를 사용하는 방식에 집중해서 설명
   
  1. 첫 정점을 기준으로 배열을 선언하여 첫 정점에서 각 정점까지의 거리를 저장
   - 초기에는 첫 정점의 거리는 0, 나머지는 inf으로 저장
   - 우선순위 큐에 (첫 정점, 거리 0) 만 먼저 넣음
   
  2. 우선순위 큐에서 노드를 꺼냄
   - 처음에는 첫 정점만 저장되어 있으므로, 첫 정점이 꺼내짐
   - 첫 정점에 인접한 노드들 각각에 대해, 첫 정점에서 각 노드로 가는 거리와 현재 배열에 저장되어 있는 첫정점에서 각 정점까지의 거리를 비교한다.
   - 배열에 저장되어 있는 거리보다, 첫 정점에서 해당 노드로 가는 거리가 더 짧을 경우, 배열에 해당 노드의 거리를 업데이트 한다.
   - 배열에 해당 노드의 거리가 업데이트 된 경우, 우선순위 큐에 넣는다.
    - 결과적으로 너비우선탐색 방식과 유사함
    - 만약 배열에 기록된 현재까지 발견된 가장 짧은 거리보다, 더 긴 거리를 가진 (노드, 거리)의 경우에는 해당 노드와 인접한 노드간의 거리 계산을 하지 않는다.
  
  3. 2번의 과정을 우선순위 큐에 꺼낼 노드가 없을 때까지 반복한다.
  

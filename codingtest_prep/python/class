클래스 : 객체, 전체에서 공유 (인스턴스 네임 스페이스에서 값이 없으면, 클래스 네임 스페이스에서 찾아서 가져온다.)
변수에 할당하여 (인스턴스화) 메모리에 저장
네임스페이스 : 객체를 인스턴스화 할 때 저장된 공간
클래스 변수 : 직접 사용 가능, 객체 보다 먼저 생성
인스턴스 변수 : 객체마다 별도로 존재,  인스턴스 생성 후 사용


* self
class SelfTest:
  def function1():
    print('function1 called')
  
  def function2(self):
    print('function2 called')
    
self_test = SelfTest()
self_test.function1() : return error / class 메소드 이기때문에 -> SelfTest.function1()
self_test.function2() : return 'function2 called!' / 인스턴스 메소드

*클래스 상속, 다중 상속
상속 : 부모 클래스(슈퍼클래스) 및 서브클래스(자식) : 모든 속성, 메소드 사용 가능

*중복되는 코드 재사용, 코드 단순화
예) 라면 : 속성(종류, 회사, 맛, 면, 이름) => 부모

예)
class Car:
  """parent class"""
  
  def __init__(self, tp, color):
    self.type = type
    sefl.color = color
    
  def show(self):
    return 'car class "show method!"'
    
class BmwCar(car):
  """sub class"""
  def __init__(self, car_name, tp, color)
    super().__init(tp,color)
    self.car_name = car_name
    
 def show_model(self) -> None:
  return "Your Car Name : {}".format(self.car_name)
  
class BenzCar(car):
  """sub class"""
  def __init__(self, car_name, tp, color)
    super().__init(tp,color)
    self.car_name = car_name
    
 def show_model(self) -> None:
  return "Your Car Name : {}".format(self.car_name)
  
  
 def show(self):
  return 'car info {}{}{}".format(self.car_name, self.type, self.color)
  
  
#사용
model1 = BmwCar('520d', 'sedan', 'red)

print(model1.color) / return 'red' / from Super
print(model1.type) / return 'sedan' / from Super
print(model1.car_name) / return '520d' / from Sub
print(model1.show()) / return 'car class "show method!"' / from Super
print(model1.show_model()) / return "Your Car Name : 520d" / from Sub
print(model1.__dict__) / return {'type':'sedan', 'color':'red', 'car_name':'520d'}

#method overriding
model2 = BenzCar('220d', 'suv', 'red')
print(model2.show()) : return 'car info 220d suv red'  부모 클래스에도 show가 잇지만 자식 클래스에 있는 show()반환

# parent method call
BenzCar class 의 show(self) 메소드에서 print(super().show()) 문을 넣으면 부모 클래스의 show()도 프린트 된다.

# 상속 info
print(classname.mro()) : 상속형태를 리스트로 반환


*다중 상속



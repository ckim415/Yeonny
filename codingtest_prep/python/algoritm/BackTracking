백트래킹 / 퇴각 검색: 다시는 조건에 맞지 않는 후보군을 체크하지 않는 것 (알고리즘/기법 보다는 전략)
 - 제약 조건 만족 문제(constraint satisfaction problem)에서 해를 찾기 위한 전략
  - 해를 찾기 위해, 후보군에 제약 조건을 점진적으로 체크하다가, 해당 후보군이 제약 조건을 만족할 수 없다고 판단되는 즉시 back track, 다른 후보군으로 넘어가며, 결국 최적의 해를 찾는 방법
 - 실제 구현시, 고려할 수 있는 모든 경우의 수 (후보군)을 상태공간트리(state space tree)를 통해 표현
  - 각 후보군을 DFS 방식으로 확인
  - 상태 공간 트리를 탐색하면서, 제약이 맞지 않으면 해의 후보가 될만한 곳으로 바로 넘어가서 탐색
   - promising: 해당 루트가 조건에 맞는지를 검사하는 기법
   - pruning: 조건에 맞지 않으면 포기하고 다른 루트로 바로 들어가서, 탐색의 시간을 절약하는 기법
   
=> 트리 구조를 기반으로 DFS 탐색을 진행하면서 각 루트에 대해 조건에 부합하는지 체크(promising), 만약 해당 트리에서 조건에 맞지 않는 노드는 더 이상 DFS로 탐색하지 않고, 가지를 침 (pruning)

1. 상태 공간 트리 (state space tree)

2. 예시
 - N Queen 문제 이해
  - 대표적 백트래킹 문제 
  - N*N 크기의 체스판에 N개의 퀸을 서로 공격할 수 없도록 배치하는 문제
  - 퀸은 수직,수평,대각선 이동할 수 있으므로, 배치된 퀸 간에 공격할 수 없는 위치로 배치해야 함

  

linked list
1.연결리스트
 - 떨어진 곳에 존재하는 데이터를 화살표로 연결해서 관리하는 구조
 - 파이썬은 리스트 타입이 링크드 리스트의 기능을 모두 지원
 
 - 기본 구조와 용어
  - 노드: 데이터 저장 단위 (데이터값, 포인터)로 구성
  - 포인터: 각 노드 안에서, 다음이나 이전의 노드와의 연결 정보를 가지고 있는 공간
        _______________________
        |           |         |
        |  노드      | 포인터  | --------> 
        |  (NUMBER) |         |
        |___________|_________|
        
        
2. 간단한 링크드 리스트의 예
 - 노드 구현
  - 보통 파이썬에서 링크드 리스트 구현시, 파이썬 클래스를 활용함
  
  class Node:
    def __init__(self, data):
      self.data = data
      self.next = None
      
  또는
  class Node:
    def __init__(self, data, next=None):
      self.data = data
      self.next = next
      
    
 예시 -> linked_list.ipynb 확인

3. 링크드리스트의 장단점 (전통적인 C언어에서의 배열과 링크드 리스트)
 - 장점
  - 미리 데이터 공간을 할당하지 않아도 됨 / 배열은 미리 할당 해야 함
 - 단점
  - 연결을 위한 별도 데이터 공간이 필요하므로, 저장공간 효율이 높지 않음
  - 연결 정보를 찾는 시간이 필요하므로 접근 속도가 느림
  - 중간 데이터 삭제시, 앞뒤 데이터의 연결을 재구성해야 하는 부가적인 작업 필요
  
4. 링크드 리스트의 복잡한 기능1 (링크드 리스트 데이터 사이에 데이터를 추가)
 - 링크드 리스트는 유지 관리에 부가적인 구현이 필요함
 

5. 다양한 링크드 리스트 구조
 - 더블 링크드 리스트 기본구조
  - 장점: 양방향으로 연결되어 있어 노드 탐색이 양쪽으로 모두 가능
  - linked_list2.ipynb 확인

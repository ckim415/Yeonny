Heap : 트리 기반, 데이터에서 최댓값과 최솟값을 빠르게 찾기 위해 고안된 완전 이진 트리 (complete binary tree)
 - complete binary tree: 노드 삽입시, 최하단 왼쪽 노드부터 차례대로 삽입하는 트리
 - 사용하는 이유:
  - 배열에 데이터를 넣고, 최댓값과 최솟값을 찾으려면 O(n)이 걸림
  - 이에 반해, 힙에 데이터를 넣고, 최대값과 최솟값을 찾으면, O(logn)이 걸림
  - 우선순위 큐와 같이 최댓값 또는 최솟값을 빠르게 찾아야 하는 자료구조 및 알고리즘 구현 등에 활용됨
 
 
1. 구조
 - max heap: 최댓값을 구하기 위한 구조
 - min heap: 최솟값을 구하기 위한 구조
 - 트리의 두가지 조건
  - max heap: 각 노드의 값은 해당 노드의 자식 노드가 가진 값보다 크거나 같다.
   -min heap: max heap 의 반대
  - 완전 이진 트리
  
 -힙과 이진 탐색 트리의 공통점과 차이점
  - 공통점: 이진트리 (각 노드들의 자식 노드가 2개)
  - 차이점:
    - 힙
     - 최댓값 또는 최솟값 탐색에 초점
     - 부모 노드가 가장 크거나 가장 작은 값을 가짐
    - 탐색 트리
     - 탐색에 초점
     - 자식 노드 중 왼쪽에 가장 작은값, 오른쪽 자식 노드가 가장 큰값, 부모 노드는 그사이 중간값을 가짐
  
  
2. 동작
 - 추가
  1. 왼쪽노드 부터 오른쪽으로 추가
  2. 자식 노드의 값과 비교하여 큰/작은 값으로 교체
 - 삭제 
  1: root노드를 삭제
  2: 가장 나중에 추가된 노드를 root노드로 이동
  3: 자식 노드의 값과 비교하여 큰/작은 값으로 교체 
